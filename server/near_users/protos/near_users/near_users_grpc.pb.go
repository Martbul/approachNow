// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: near_users.proto

package near_users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NearUsers_GetNearbyUsers_FullMethodName    = "/near_users.NearUsers/GetNearbyUsers"
	NearUsers_StreamNearbyUsers_FullMethodName = "/near_users.NearUsers/StreamNearbyUsers"
)

// NearUsersClient is the client API for NearUsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NearUsersClient interface {
	GetNearbyUsers(ctx context.Context, in *UserLocation, opts ...grpc.CallOption) (*NearbyUsersResponse, error)
	StreamNearbyUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UserLocation, NearbyUsersResponse], error)
}

type nearUsersClient struct {
	cc grpc.ClientConnInterface
}

func NewNearUsersClient(cc grpc.ClientConnInterface) NearUsersClient {
	return &nearUsersClient{cc}
}

func (c *nearUsersClient) GetNearbyUsers(ctx context.Context, in *UserLocation, opts ...grpc.CallOption) (*NearbyUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NearbyUsersResponse)
	err := c.cc.Invoke(ctx, NearUsers_GetNearbyUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearUsersClient) StreamNearbyUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UserLocation, NearbyUsersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NearUsers_ServiceDesc.Streams[0], NearUsers_StreamNearbyUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserLocation, NearbyUsersResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NearUsers_StreamNearbyUsersClient = grpc.BidiStreamingClient[UserLocation, NearbyUsersResponse]

// NearUsersServer is the server API for NearUsers service.
// All implementations must embed UnimplementedNearUsersServer
// for forward compatibility.
type NearUsersServer interface {
	GetNearbyUsers(context.Context, *UserLocation) (*NearbyUsersResponse, error)
	StreamNearbyUsers(grpc.BidiStreamingServer[UserLocation, NearbyUsersResponse]) error
	mustEmbedUnimplementedNearUsersServer()
}

// UnimplementedNearUsersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNearUsersServer struct{}

func (UnimplementedNearUsersServer) GetNearbyUsers(context.Context, *UserLocation) (*NearbyUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearbyUsers not implemented")
}
func (UnimplementedNearUsersServer) StreamNearbyUsers(grpc.BidiStreamingServer[UserLocation, NearbyUsersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamNearbyUsers not implemented")
}
func (UnimplementedNearUsersServer) mustEmbedUnimplementedNearUsersServer() {}
func (UnimplementedNearUsersServer) testEmbeddedByValue()                   {}

// UnsafeNearUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NearUsersServer will
// result in compilation errors.
type UnsafeNearUsersServer interface {
	mustEmbedUnimplementedNearUsersServer()
}

func RegisterNearUsersServer(s grpc.ServiceRegistrar, srv NearUsersServer) {
	// If the following call pancis, it indicates UnimplementedNearUsersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NearUsers_ServiceDesc, srv)
}

func _NearUsers_GetNearbyUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearUsersServer).GetNearbyUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NearUsers_GetNearbyUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearUsersServer).GetNearbyUsers(ctx, req.(*UserLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearUsers_StreamNearbyUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NearUsersServer).StreamNearbyUsers(&grpc.GenericServerStream[UserLocation, NearbyUsersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NearUsers_StreamNearbyUsersServer = grpc.BidiStreamingServer[UserLocation, NearbyUsersResponse]

// NearUsers_ServiceDesc is the grpc.ServiceDesc for NearUsers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NearUsers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "near_users.NearUsers",
	HandlerType: (*NearUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNearbyUsers",
			Handler:    _NearUsers_GetNearbyUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNearbyUsers",
			Handler:       _NearUsers_StreamNearbyUsers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "near_users.proto",
}
